서블릿
- 알바생

JSP
- 알바생
- 서블릿

- webapp > "ex01.jsp"

JSP 구성 요소

1. JSP 지시자, JSP Directive
	- <%@ %>
	a. page 지시자
	b. include 지시자
	c. taglib 지시자
	

2. 스크립트 요소, Scripting Elements
	- <% %>
	a. 스크립틀팃
	b. 익스프레션(표현식)
	c. 선언부

3. 액션 태그, Action Tags
	- <jsp:XXX>, <c:XXX>
	- 기본 액션 태그
	- 확장 액션 태그
	- 사용자 정의 액션 태그


a. page 지시자
- webapp > "ex02.jsp"
- JSP 페이지 실행 환경 > 톰캣에게 알려준다.
- JSP 페이지 첫줄에 작성 
- 1개 이상 작성 가능

- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
	a. page
		- 키워드
	b. language="java"
		- JSP 페이지에서 사용 할 프로그래밍 언어 지정
	c. contentType="text/html; charset=UTF-8"
		- JSP 페이지의 콘텐츠에 대한 기술
		- text/html: MIME 타입 > HTML > 브라우저에게 전달
		- charset=UTF-8: 인코딩 > HTML > 브라우저에게 전달
	d. pageEncoding="UTF-8"
		- 현재 JSP 페이지의 인코딩

b.include 지시자
-webapp > "inc" > "copyright.jsp

a. 스크립틀릿
- <% %>
- Srcript + Applet
- HTML 영역에서 Javaㅁ문법을 사용가능하게 하는 영역을 제공
- "ex04.jsp"

b. 익스프레션(표현식)
<%= > 표현식
- 자바의 값을 HTML 문서에 출력하는 역할
- System.out.print() 역할
- 브라우저 화면에 출력하는 것이 아니다.(***) > HTML 문서에 출력
- "ex05.jsp"
- "ex06.jsp"

c. 선언부
- <%! %>
- "ex08.jsp"
- "com.test.java" > "MyUtil.java"

다른 jsp파일에서 가져 올 수가 없음 -> 이름을 알 수가 없음.
								  -> java에서 불러오기 가능
							
JSP 내장 객체, JSP Impicit Object
- 개발자가 직접 생성하지 않아도, 톰 캣이 미리 만들어 제공하는 객체
- 예약어(키워드)로 제공
- request, response, session, pageContext
- out, application
- config, page, exception 등

*** pageContext, request, session, application
	- 객체 내부에 사용자 데이터를 저장 할 수 있는 컬렉션을 가지고 있다.
	- void setAttribute(String key, Object value)
	- Object getAttribute(String key)
	
	
	
	
request
- HttpServletRequest
- 서블릿의 doGet/doPost의 첫번째 매개변수와 동일

1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	- ex09_form.jsp
	- ex09_ok.jsp

~ ex 13

2. 클라이언트에서 서버로 전송한 데이터의 인코딩 처리

3. 클라이언트에서 서버로 요청 시 정보를 가져오기

response
- HttpServletResponse
- 서블릿의 doGet/doPost의 두번째 매개변수와 동일
- 주로 서버측에서 클라이언트측으로 발생하는 업무를 담당

1. 돌려줄 HTML 페이지를 생성
	- response.gerWriter() > PrintWriter > HTML 제작
	- 서블릿 > 구현(O)
	- JSP > 구현(X) > 내부적으로 자동 구현(O)

2. 돌려줄 HTML 페이지 인코딩 설정
	- response.setCharacterEncoding("UTF-8");
	- 서블릿 > 구현(O)
	- JSP > 페이지 지시자 > contentType="text/html; charset=UTF-8"
	
3. 돌려줄 HTML 페이지 MIME 설정
	- contentType="text/html;"
	
4. 페이지 이동하기
	- "ex14_response_1.jsp"
	- "ex14_response_2.jsp"


서블릿/JSP 동작 방식
- 요청 ~ 응답까지 벌어지는 일들..


서블릿 동작 방식
-com.test.java > Test.java






pageContext

- "ex15_pagecontext_1.jsp"
- "ex15_pagecontext_2.jsp"



session, application
- 클라이언트(브라우저 사용자)가 서버에 접속 ~ 나갈 때 까지의 간격
- 객체 입장으로서의 역할
- 세션하고 어플리케이션 구분해서 잘 생각하기
- 어플리케이션은 마지막 사용자가 나간 뒤 30 분 까지도 유지해서 엄청나게 메모리를 잡아먹음
- 세션 만료 시간은 상대에 맞춰주는게 맞음 -> 하지만 어려움


- "ex17_session.jsp"

- "ex18_session.jsp"
- "ex18_set.jsp"
- "ex18_del.jsp"
- "ex18_interval.jsp"
- "ex18_reset.jsp"

내장 객체의 생명 주기
- pageContext, request, session, application
- 내부 컬렉션 사용 가능 객체

- pageContext: 생성(페이지 요청) ~ 소멸(페이지 반환) -> 주기 개빠름
- request: 생성(페이지 요청) ~ 소멸(페이지 반환)
			생성(처음 페이지 요청) ~ 페이지 이동(forward) ~ 소멸(다음 페이지 반환)
- session: 생성(처음 방문 시) ~ 소멸(최종 접속 후 30분 미접속)
- application: 생성(첫번째 사용자 접속) ~ 소멸(마지막 사용자 세션 소멸 시)



파일 업로드/다운로드

단일 파일 업로드
- "ex19_form.jsp"
- "ex19_ok.jsp"


다중 파일 업로드
- "ex20_form.jsp"
- "ex20_ok.jsp"

WEB-INF > lib에 jar파일 넣으면 톰캣이 알아서 등록해줌

























